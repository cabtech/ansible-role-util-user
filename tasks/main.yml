---
# --------------------------------

- name: 'Get user status (CM=F) : {{ user.name }}'
  ansible.builtin.getent:
    database: passwd
    fail_key: false
    key: '{{ user.name }}'
  register: reg_user
  check_mode: false
  changed_when: false
  tags: ct-user

- name: 'Record user status and mortality (CM=F) : {{ user.name }}'
  ansible.builtin.set_fact:
    user_exists: '{{ reg_user.msg is not defined }}'
    mortal: '{{ user.mortal | bool }}'
  check_mode: false
  tags: ct-user

- name: 'Report on user status (CM=F)'
  ansible.builtin.debug:
    var: reg_user
    verbosity: 1
  check_mode: false
  tags: [ct-user]

- name: 'If adding user, add user group first : {{ user.name }}'
  ansible.builtin.group:
    name: '{{ user.name }}'
    state: present
  become: true
  when:
  - mortal
  - user.state == 'present'
  tags: ct-user

- name: 'If removing user, remove SSH keys first : {{ user.name }}'
  ansible.builtin.authorized_key:
    key: '{{ kk.key }}'
    state: absent
    user: '{{ user.name }}'
  loop: '{{ user.ssh_keys }}'
  loop_control:
    loop_var: kk
    label: '{{ user.name }}'
  ignore_errors: '{{ ansible_check_mode | bool }}'
  when:
  - mortal
  - user_exists
  - user.state == 'absent'
  - user.ssh_keys is defined
  become: true
  tags: ct-user

- name: 'User account : {{ user.name }}'
  ansible.builtin.user:
    name: '{{ user.name }}'
    comment: '{{ user.comment }}'
    groups: "{{ (user.groups + [user.name]) | join(',') }}"
    append: true
    shell: /bin/bash
    password: '{{ user.password | default(omit) }}'
    state: '{{ user.state }}'
  when: mortal
  become: true
  tags: ct-user

- name: 'If removing user, remove user group afterwards : {{ user.name }}'
  ansible.builtin.group:
    name: '{{ user.name }}'
    state: absent
  become: true
  when:
  - mortal
  - user.state == 'absent'
  tags: ct-user

- name: 'Get user status (CM=F) : {{ user.name }}'
  ansible.builtin.getent:
    database: passwd
    fail_key: false
    key: '{{ user.name }}'
  register: reg_user
  check_mode: false
  changed_when: false
  tags: [ct-user]

- name: 'Record user status (CM=F) : {{ user.name }}'
  ansible.builtin.set_fact:
    user_exists: '{{ reg_user.msg is not defined }}'
  check_mode: false
  tags: ct-user

- name: 'Report on user status (CM=F) : {{ user.name }}'
  ansible.builtin.debug:
    var: reg_user
    verbosity: 1
  check_mode: false
  tags: [ct-user]

- name: 'Create essential directories : {{ user.name }}'
  ansible.builtin.file:
    path: '{{ ct_user_homedir }}/{{ user.name }}/{{ kk.name }}'
    state: directory
    owner: '{{ user.name }}'
    group: '{{ user.name }}'
    mode: '{{ kk.mode }}'
  loop: '{{ ct_essential_dirs }}'
  loop_control:
    loop_var: kk
    label: '{{ kk.name }}'
  when:
  - (not mortal) or (mortal and user.state == 'present')
  become: true
  tags: [ct-user]

- name: 'Create standard directories : {{ user.name }}'
  ansible.builtin.file:
    path: '{{ ct_user_homedir }}/{{ user.name }}/{{ kk.name }}'
    state: directory
    owner: '{{ user.name }}'
    group: '{{ user.name }}'
    mode: '{{ kk.mode }}'
  loop: '{{ ct_standard_dirs }}'
  loop_control:
    loop_var: kk
    label: '{{ kk.name }}'
  when:
  - (not mortal) or (mortal and user.state == 'present')
  - not user.expert
  become: true
  tags: [ct-user]

- name: 'Manage SSH keys : {{ user.name }}'
  ansible.builtin.authorized_key:
    key: '{{ kk.key }}'
    state: '{{ kk.state }}'
    user: '{{ user.name }}'
  loop: '{{ user.ssh_keys }}'
  loop_control:
    loop_var: kk
    label: '{{ user.name }}'
  ignore_errors: '{{ ansible_check_mode | bool }}'
  when:
  - (not mortal) or (mortal and user.state == 'present')
  - user.ssh_keys is defined
  become: true
  tags: [ct-user]

- name: 'Copy over base fragment for SSH config : {{ user.name }}'
  ansible.builtin.copy:
    src: ssh_first.cfg
    dest: '{{ ct_user_homedir }}/{{ user.name }}/.ssh/cfg.d/000.cfg'
    owner: '{{ user.name }}'
    group: '{{ user.name }}'
    mode: '0600'
  when:
  - mortal
  - user.state == 'present'
  - not user.expert
  become: true
  tags: ct-user

- name: 'Add line to .bashrc : {{ user.name }}'
  ansible.builtin.lineinfile:
    dest: '{{ ct_user_homedir }}/{{ user.name }}/.bashrc'
    group: '{{ user.name }}'
    line: '[[ -d ~/etc/bash.d ]] && for ff in ~/etc/bash.d/*.sh; do source $ff; done # ansible'
    owner: '{{ user.name }}'
    state: present
  when:
  - (not mortal) or (mortal and user.state == 'present')
  - not user.expert
  become: true
  tags: ct-user

- name: 'Copy misc files over : {{ user.name }}'
  ansible.builtin.copy:
    dest: '{{ kk.dest }}'
    group: '{{ user.name }}'
    mode: '{{ kk.mode }}'
    owner: '{{ user.name }}'
    src: '{{ kk.src }}'
  loop:
  - {src: dot_yamllint, dest: '{{ ct_user_homedir }}/{{ user.name }}/.yamllint', mode: '0644'}
  - {src: dot_vimrc, dest: '{{ ct_user_homedir }}/{{ user.name }}/.vimrc', mode: '0444'}
  - {src: yaml.vim, dest: '{{ ct_user_homedir }}/{{ user.name }}/.vim/ftplugin/', mode: '0444'}
  loop_control:
    loop_var: kk
    label: '{{ kk.dest }}'
  when:
  - (not mortal) or (mortal and user.state == 'present')
  - not user.expert
  become: true
  tags: ct-user

- name: 'Sort out prompt string : {{ user.name }}'
  ansible.builtin.template:
    src: ps1.sh.j2
    dest: '{{ ct_user_homedir }}/{{ user.name }}/etc/bash.d/ps1.sh'
    owner: '{{ user.name }}'
    group: '{{ user.name }}'
    mode: '0444'
  when:
  - (not mortal) or (mortal and user.state == 'present')
  - not user.expert
  become: true
  tags: ct-user

- name: 'Assemble SSH config fragments : {{ user.name }}'
  ansible.builtin.assemble:
    delimiter: '# --------------------------------'
    dest: '{{ ct_user_homedir }}/{{ user.name }}/.ssh/config'
    group: '{{ user.name }}'
    regexp: '\w+\.cfg'
    mode: '0600'
    owner: '{{ user.name }}'
    src: '{{ ct_user_homedir }}/{{ user.name }}/.ssh/cfg.d/'
  when:
  - mortal
  - user.state == 'present'
  - user.assemble_ssh | default(false)
  - not user.expert
  become: true
  tags: ct-user

- name: 'Create extra dirs from ct_user_extra_dirs : {{ user.name }}'
  ansible.builtin.file:
    group: '{{ user.name }}'
    mode: '{{ kk.mode }}'
    owner: '{{ user.name }}'
    path: '{{ kk.path }}'
    state: directory
  loop: '{{ ct_user_extra_dirs }}'
  loop_control:
    loop_var: kk
  when:
  - (not mortal) or (mortal and user.state == 'present')
  become: true
  tags: ct-user

# --------------------------------
...
